{"version":3,"sources":["components/Welcome.js","components/Message.js","components/Counter.js","components/ClassClick.js","components/EventBind.js","components/FunctionClick.js","components/ChildComponent.js","components/ParentComponent.js","components/UserGreeting.js","components/NameList.js","App.js","serviceWorker.js","index.js"],"names":["Component","FunctionClick","ChildComponent","props","onClick","greetHandler","NameList","nameList","map","name","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAEsBA,YCAAA,YCAAA,YCAGA,YCADA,YCYTC,I,OCJAC,MARf,SAAwBC,GACpB,OACI,6BACI,4BAAQC,QAAW,kBAAID,EAAME,aAAa,WAA1C,kBCFkBL,YCDHA,YCYZM,MAZf,WACI,IACMC,EADQ,CAAC,QAAQ,QAAQ,SACPC,KAAI,SAACC,GAAD,OAAU,4BAAKA,MAC3C,OACI,6BAEOF,IC8BAG,MAzBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCJcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.f153c9e5.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nclass Welcome extends Component{\n    render(){\n        const{name,heroName} = this.props\n        // const{state1, state2} = this.state\n    return <h1>Welcome {name} a.k.a. {heroName}</h1>\n    }\n}\n\nexport default Welcome","import React,{Component} from 'react'\n\nclass Message extends Component{\n\nconstructor(){\n    super()\n    this.state = {\n        message: 'Welcome Visitor'\n    }\n}\n\nchangeMessage(){\n    this.setState({\n        message: 'Thank You for Subscribing'\n    })\n}\n \nrender(){\n    return (\n        <div>\n            <h1>{this.state.message}</h1>\n            <button onClick = {()=>this.changeMessage()}>Subscribe</button>\n        </div>\n        )\n    }\n}\n\nexport default Message","import React, { Component } from 'react'\n\nclass Counter extends Component {\n\nconstructor(props) {\n    super(props)\n\n    this.state = {\n         count: 0\n    }\n}\n\nincrement(){\n//    this.setState({\n//     count: this.state.count + 1\n//     }, \n//     () => {\n//         console.log('Callback Value', this.state.count)\n//         }\n//     )\n\n    this.setState((prevState)=>({\n        count: prevState.count +1\n    }))\n    console.log(this.state.count)\n}\n\nincrementFive(){\n    this.increment()\n    this.increment()\n    this.increment()\n    this.increment()\n    this.increment()\n}\n    render() {\n        return (\n           <div>\n                <div>Count - {this.state.count}</div>\n                <button onClick= {()=> this.incrementFive()}>Increment</button>\n           </div>\n        )\n    }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\n\nclass ClassClick extends Component {\n\n    clickHandler(){\n        console.log('Clicked the button')\n    }\n    render() {\n        return (\n            <div>\n                <button onClick={this.clickHandler}>Click Me</button>\n            </div>\n        )\n    }\n}\n\nexport default ClassClick\n","import React, { Component } from 'react'\n\nclass EventBind extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             message: 'Hello'\n        }\n        // this.clickHandler = this.clickHandler.bind(this)\n    }\n    // clickHandler(){\n    //     this.setState({\n    //         message: 'Goodbye!'\n    //     })\n    //     console.log(this)\n    // }\n \n    clickHandler = () =>{\n        this.setState({\n            message: 'Goodbye!'\n\n        })\n    }\n    render() {\n        return (\n            <div>\n                <div>{this.state.message}</div>\n             {/* <button onClick={this.clickHandler.bind(this)}>Click</button>    */}\n             <button onClick={this.clickHandler}>Click</button>   \n            </div>\n        )\n    }\n}\n\nexport default EventBind\n","import React from 'react'\n\nfunction FunctionClick() {\n\n    function clickHandler(){\n        console.log(\"button click\")\n    }\n    return (\n        <div>\n            <button onClick={clickHandler}>Click</button>\n        </div>\n    )\n}\n\nexport default FunctionClick\n","import React from 'react'\n\nfunction ChildComponent(props) {\n    return (\n        <div>\n            <button onClick = {()=>props.greetHandler('child')}>Greet Parent</button>\n        </div>\n    )\n}\n\nexport default ChildComponent\n","import React, { Component } from 'react'\nimport ChildComponent from './ChildComponent'\n\nclass ParentComponent extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             parentName: 'Parent'\n        }\n        this.greetParent = this.greetParent.bind(this)\n    }\n    \n    greetParent(childName){\n        alert(`Hello ${this.state.parentName} from ${childName}`)\n    }\n\n    render() {\n        return (\n            <div>\n                <ChildComponent greetHandler= {this.greetParent}/>\n            </div>\n        )\n    }\n}\n\nexport default ParentComponent\n","import React, { Component } from 'react'\n\nclass UserGreeting extends Component {\n\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             isLoggedIn: false\n        }\n    }\n    \n    render() {\n\n       return this.state.isLoggedIn && <div>Welcome Vishwas</div>\n        return(\n            this.state.isLoggedIn ? <div>Welcome Vishwas</div>\n            : <div>Welcome Guest</div>\n        )\n    //     let message\n    //     if(this.state.isLoggedIn){\n    //         message = <div>Welcome Vishwas</div>\n    //     }\n    //     else{\n    //         message = <div>Welcome Guest</div>\n    //     }\n    \n    // return <div>{message}</div>\n    }\n}\n\nexport default UserGreeting\n","import React from 'react'\n\nfunction NameList() {\n    const names = ['Bruce','Clark','Diana']\n    const nameList =  names.map((name) => <h2>{name}</h2>)\n    return (\n        <div>\n            {\n               nameList\n            }\n        </div>\n    )\n}\n\nexport default NameList\n","import React from 'react';\nimport './App.css';\nimport Greet from './components/Greet'\nimport Welcome from './components/Welcome'\nimport Message from './components/Message'\nimport Counter from './components/Counter'\nimport FunctionClick from './components/FunctionClick';\nimport ClassClick from './components/ClassClick';\nimport EventBind from './components/EventBind';\nimport ParentComponent from './components/ParentComponent';\nimport UserGreeting from './components/UserGreeting';\nimport NameList from './components/NameList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NameList></NameList>\n      {/* <UserGreeting/> */}\n      {/* <ParentComponent/> */}\n      {/* <EventBind></EventBind> */}\n      {/* <FunctionClick></FunctionClick> */}\n      {/* <ClassClick></ClassClick> */}\n      {/* <Counter/> */}\n      {/* <Greet name = \"Bruce\" heroName = \"Batman\">\n        <p>This is children props</p>\n      </Greet> */}\n      {/* <Greet name = \"Clark\" heroName = \"Superman\">\n        <button>Action</button>\n        </Greet> */}\n      {/* <Greet name = \"Diana\" heroName = \"Wonder woman\" /> */}\n      {/* <Welcome name = \"Bruce\" heroName = \"Batman\"/> */}\n      {/* <Welcome name = \"Clark\" heroName = \"Superman\"/> */}\n      {/* <Welcome name = \"Diana\" heroName = \"Wonder woman\"/> */}\n      {/* <Message></Message> */}\n    </div>\n  );\n}     \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}